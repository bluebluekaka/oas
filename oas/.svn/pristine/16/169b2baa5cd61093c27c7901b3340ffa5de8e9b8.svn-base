package com.oas.web.json;

import org.apache.log4j.Logger;

import com.oas.common.DataSourceAction;
import com.oas.common.Helper;
import com.oas.objects.Financial;
import com.oas.objects.Order;
import com.oas.objects.Query;
import com.oas.util.StringUtil;

public class FinancialJson extends DataSourceAction {

	private static final long serialVersionUID = -5612721889737285900L;
	protected final Logger log = Logger.getLogger(getClass());

	private Query query;
	private Financial financial;
	private Order order;
	
	public Query getQuery() {
		return query;
	}
	
	public void setQuery(Query query) {
		this.query = query;
	}

	public Financial getFinancial() {
		return financial;
	}

	public void setFinancial(Financial financial) {
		this.financial = financial;
	}

	public Order getOrder() {
		return order;
	}

	public void setOrder(Order order) {
		this.order = order;
	}

	public String execute() throws Exception {
		try {
			if (action != null) {
				
			} else {
				term = Helper.getQuerySqlNull(query, "fo.create_timei");

				skip = JSON;
				String sqlStr = "select fo.financial_order_code,fo.order_code,fo.adjust_profit,fo.order_state" +
						",fo.received_amount,fo.received_state,oi.recmoney" +
						",oi.paymoney,oi.profit,fo.creater,fo.last_user" +
						",fo.create_time,fo.last_operate_time,fo.order_state" +
						",fo.audit_state,u1.name userName,u2.name luserName" +
						" from financial_order fo" +
						" inner join orderinfo oi on fo.order_code = oi.orderid" +
						" left join user u1 on fo.creater = u1.workcardno" +
						" left join user u2 on fo.last_user = u2.workcardno" +
//						" left join customer c on ct.customer_id = c.id" +
						" where 1=1 " + term;
				if(!"".equals(financial.getOrderCode())&&financial.getOrderCode()!=null){
					sqlStr += " and fo.order_code in ("+financial.getOrderCode()+")";
				}
				if((!"".equals(order.getPnr())&&order.getPnr()!=null)||order.getType()!=99||(!"".equals(order.getClientid())&&order.getClientid()!=null)){
					sqlStr += " and exists (select 1 from orderinfo o where 1=1 and o.orderid = fo.order_code ";
					if(!"".equals(order.getPnr())&&order.getPnr()!=null){
						sqlStr += " and o.pnr ='"+order.getPnr()+"'";
					}
					if(order.getType()!=99){
						sqlStr += " and o.type ="+order.getType()+"";
					}
					if(!"".equals(order.getClientid())&&order.getClientid()!=null){
						sqlStr += " and o.cid ='"+order.getClientid()+"'";
					}
					sqlStr +=")";
				}
				if(financial.getReceivedState()!=99){
					sqlStr += " and fo.received_state ="+financial.getReceivedState()+"";
				}
				if(financial.getAuditState()!=99){
					sqlStr += " and fo.audit_state ="+financial.getAuditState()+"";
				}
				
				sqlStr += " order by fo.financial_order_code desc";
//				System.out.println(sqlStr);
				executeQuery(sqlStr);
				while (rs.next()) {
					Long financialOrderCode = rs.getLong("financial_order_code");
					String orderCode = rs.getString("order_code");
					Float recmoney = rs.getFloat("recmoney");
					Float paymoney = rs.getFloat("paymoney");
					Float profit = rs.getFloat("profit");
					Float adjustProfit = rs.getFloat("adjust_profit");
					float receivedAmount = rs.getFloat("received_amount");
					int receiveState = rs.getInt("received_state");
					int orderState = rs.getInt("order_state");
					int auditState = rs.getInt("audit_state");
					String user = StringUtil.toString(rs.getString("creater"));
					String luser = StringUtil.toString(rs.getString("last_user"));
					String userName = StringUtil.toString(rs.getString("userName"));
					String luserName = StringUtil.toString(rs.getString("luserName"));
					String createTime = StringUtil.toString(rs.getDate("create_time"))+" "+StringUtil.toString(rs.getTime("create_time"));
					String updateTime = StringUtil.toString(rs.getDate("last_operate_time"))+" "+StringUtil.toString(rs.getTime("last_operate_time"));
					if (count != 0)
						bf.append(",");
					bf.append("{'financialOrderCode':'" + financialOrderCode + "'")
					  .append(",'orderCode':'" + orderCode + "'")
					  .append(",'receivedAmount':'" + receivedAmount + "'")
					  .append(",'receiveState':'" + receiveState + "'")
					  .append(",'orderState':'" + orderState + "'")
					  .append(",'auditState':'" + auditState + "'")
					  .append(",'recmoney':'" + recmoney + "'")
					  .append(",'paymoney':'" + paymoney + "'")
					  .append(",'profit':'" + profit + "'")
					  .append(",'adjustProfit':'" + adjustProfit + "'")
					  .append(",'user':'" + user + "'")
					  .append(",'userName':'" + userName + "'")
					  .append(",'createTime':'" + createTime + "'")
					  .append(",'luser':'" + luser + "'")
					  .append(",'luserName':'" + luserName + "'")
					  .append(",'updateTime':'" + updateTime + "'}");
					count++;
				}
				String counts = "总数：" + count;
				tojsonNew(counts);
			}
		} catch (Exception e) {
			skip = ERROR;
			addActionError(e.toString());
			e.printStackTrace();
		} finally {
			closeConnection();
		}
		
			
		return skip;
	}
	
}
